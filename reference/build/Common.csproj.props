<!--
  Solution-specific configuration/targets should generally not be placed in this file.
  For solution-wide NuGet properties, update Package.props
  For everything else, update or create Project.csproj.props
-->
<Project>
  <!-- Default configuration and platform when not present -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
  </PropertyGroup>

  <!-- Common C# Properties -->
  <PropertyGroup>
    <LangVersion>12.0</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <Features>strict</Features>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!-- Build to central artifacts folder instead of scattering bin and obj throughout the solution tree -->
    <UseArtifactsOutput>true</UseArtifactsOutput>
    <ArtifactsPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)../artifacts'))</ArtifactsPath>

    <!--
      Odd things can happen when WSL and Windows share the same output directories (IE: when building from a single clone of the repo which is shared between both.)
      As such if we detect we're running under WSL we use different output directories.
    -->
    <ArtifactsPath Condition="'$(WSL_DISTRO_NAME)' != ''">$(ArtifactsPath)/wsl</ArtifactsPath>
  </PropertyGroup>

  <!-- Universal NuGet Package Properties -->
  <PropertyGroup>
    <Authors>Bonsai Foundation</Authors>
    <Copyright>Copyright Â© Bonsai Foundation CIC and Contributors</Copyright>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageType>Dependency;BonsaiLibrary</PackageType>

    <PackageIcon>icon.png</PackageIcon>
    <PackageIconSourcePath>$(MSBuildthisFileDirectory)icon.png</PackageIconSourcePath>

    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageLicenseSourcePath>$(MSBuildthisFileDirectory)../LICENSE</PackageLicenseSourcePath>

    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageReadmeSourcePath>$(MSBuildthisFileDirectory)../docs/README.md</PackageReadmeSourcePath>
    <PackageReadmeSourcePath Condition="Exists('$(MSBuildthisFileDirectory)README.nuget.md')">$(MSBuildthisFileDirectory)README.nuget.md</PackageReadmeSourcePath>
    <PackageReadmeSourcePath Condition="Exists('$(MSBuildProjectDirectory)\README.md')">$(MSBuildProjectDirectory)\README.md</PackageReadmeSourcePath>
    <PackageReadmeSourcePath Condition="Exists('$(MSBuildProjectDirectory)\README.nuget.md')">$(MSBuildProjectDirectory)\README.nuget.md</PackageReadmeSourcePath>

    <!-- Emit modern symbol packages -->
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSymbols Condition="'$(Configuration)' != 'Release'">false</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>

    <!-- Embed untracked sources in the PDB for Source Link when building from CI -->
    <EmbedUntrackedSources>false</EmbedUntrackedSources>
    <EmbedUntrackedSources Condition="'$(ContinuousIntegrationBuild)' == 'true'">true</EmbedUntrackedSources>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Promote especially problematic warnings to errors
      * NU1701 - Restore graph contains mismatched target frameworks
      * CS7035 - Malformed version string
    -->
    <WarningsAsErrors>$(WarningsAsErrors);NU1701;CS7035</WarningsAsErrors>

    <!-- Explicitly opt in to modern resource embedding (required for building .NET Framework projects from .NET SDK) -->
    <GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>

    <!-- Enable windows targeting (required when building from non-Windows platforms) -->
    <EnableWindowsTargeting>true</EnableWindowsTargeting>

    <!-- Provide Bonsai executable path for use with launchSettings.json -->
    <BonsaiExecutablePath>$(MSBuildThisFileDirectory)../.bonsai/Bonsai.exe</BonsaiExecutablePath>
  </PropertyGroup>

  <!-- Automatically enable banned API analyzer -->
  <ItemGroup>
    <AdditionalFiles Include="BannedSymbols.txt" Condition="Exists('BannedSymbols.txt')" Visible="false" />
    <AdditionalFiles Include="$(ProjectDir)BannedSymbols.txt" Condition="Exists('$(ProjectDir)BannedSymbols.txt')" />
    <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <Import Project="Project.csproj.props" Condition="Exists('Project.csproj.props')" />
  <Import Project="Package.props" />
  <Import Project="Common.Tests.csproj.props" Condition="$(MSBuildProjectName.EndsWith('.Tests'))" />
</Project>